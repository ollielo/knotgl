// Generated by CoffeeScript 1.3.1
(function() {
  var CollapsedSizes, CurrentSizes, ExpandedSizes, UpdateLabels, assignEventHandlers, box, clone, getPagePosition, layout, root, updateNumeralSizes, updateSwipeAnimation;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.pageIndex = 0;

  root.pan = {
    x: 0
  };

  root.mouse = {
    position: {
      x: -1,
      y: -1
    },
    within: false,
    hot: false
  };

  root.AppInit = function() {
    var c, gl, height, width;
    c = $('canvas').get(0);
    gl = c.getContext('experimental-webgl', {
      antialias: true
    });
    if (!gl.getExtension('OES_texture_float')) {
      glerr('Your browser does not support floating-point textures.');
    }
    if (!gl.getExtension('OES_standard_derivatives')) {
      glerr('Your browser does not support GLSL derivatives.');
    }
    width = parseInt($('#overlay').css('width'));
    height = parseInt($('#overlay').css('height'));
    root.renderer = new root.Renderer(gl, width, height);
    layout();
    return assignEventHandlers();
  };

  root.UpdateLabels = UpdateLabels = function() {
    var labels;
    labels = root.renderer.getCurrentLinkInfo();
    $('#crossings').text(labels.crossings);
    $('#subscript').text(labels.index);
    return $('#superscript').text(labels.numComponents);
  };

  root.AnimateNumerals = function() {
    var A, B, duration;
    if ((root.collapse != null) || (root.expand != null)) {
      return;
    }
    duration = 0.25 * root.renderer.transitionMilliseconds;
    root.collapse = A = new TWEEN.Tween(CurrentSizes).to(CollapsedSizes, duration).easing(TWEEN.Easing.Quintic.In).onUpdate(updateNumeralSizes);
    root.expand = B = new TWEEN.Tween(CurrentSizes).to(ExpandedSizes, duration).easing(TWEEN.Easing.Quintic.In).onUpdate(updateNumeralSizes);
    A.chain(B);
    root.UpdateLabels = null;
    root.collapse.onComplete(function() {
      root.UpdateLabels = UpdateLabels;
      return root.collapse = null;
    });
    root.expand.onComplete(function() {
      return root.expand = null;
    });
    return A.start();
  };

  root.UpdateSelectionRow = function() {
    var r, top;
    r = root.renderer;
    top = r.selectedRow * r.height / r.links.length;
    return $('#selection-row').css('top', top);
  };

  root.UpdateHighlightRow = function() {
    var r, top;
    r = root.renderer;
    if (!(r.highlightRow != null)) {
      $('#highlight-row').css('visibility', 'hidden');
      return;
    }
    $('#highlight-row').css('visibility', 'visible');
    top = r.highlightRow * r.height / r.links.length;
    return $('#highlight-row').css('top', top);
  };

  root.SwipePane = function() {
    var panTarget, swipeDuration;
    if (root.swipeTween != null) {
      return;
    }
    root.pageIndex = 1 - root.pageIndex;
    panTarget = getPagePosition(root.pageIndex);
    swipeDuration = 1000;
    root.swipeTween = new TWEEN.Tween(root.pan).to({
      x: panTarget
    }, swipeDuration).easing(TWEEN.Easing.Bounce.Out).onUpdate(updateSwipeAnimation).onComplete(function() {
      return root.swipeTween = null;
    });
    return root.swipeTween.start();
  };

  assignEventHandlers = function() {
    $(window).resize(function() {
      return layout();
    });
    $(document).keydown(function(e) {
      if (e.keyCode === 38) {
        root.renderer.moveSelection(0, -1);
      }
      if (e.keyCode === 40) {
        root.renderer.moveSelection(0, +1);
      }
      if (e.keyCode === 37) {
        root.renderer.moveSelection(-1, 0);
      }
      if (e.keyCode === 39) {
        root.renderer.moveSelection(+1, 0);
      }
      if (e.keyCode === 32) {
        return root.SwipePane();
      }
    });
    $('.arrow').mouseover(function() {
      $(this).css('color', '#385fa2');
      return root.mouse.hot = 1;
    });
    $('.arrow').mouseout(function() {
      $(this).css({
        'color': ''
      });
      return root.mouse.hot = false;
    });
    $('.arrow').click(function() {
      return root.SwipePane();
    });
    $('#wideband').mousemove(function(e) {
      var p, x, y;
      p = $(this).position();
      x = root.mouse.position.x = e.clientX - p.left;
      y = root.mouse.position.y = e.clientY - p.top;
      return root.mouse.within = 1;
    });
    $('#wideband').click(function(e) {
      var p, x, y;
      p = $(this).position();
      x = root.mouse.position.x = e.clientX - p.left;
      y = root.mouse.position.y = e.clientY - p.top;
      root.mouse.within = 1;
      return renderer.click();
    });
    return $('#wideband').mouseout(function() {
      root.mouse.position.x = -1;
      root.mouse.position.y = -1;
      return root.mouse.within = false;
    });
  };

  updateNumeralSizes = function() {
    $('#crossings').css('font-size', CurrentSizes.crossings);
    $('#superscript').css('font-size', CurrentSizes.numComponents);
    return $('#subscript').css('font-size', CurrentSizes.index);
  };

  getPagePosition = function(pageIndex) {
    var pageWidth;
    pageWidth = parseInt($('#canvaspage').css('width'));
    if (pageIndex === 1) {
      return 0;
    } else {
      return pageWidth;
    }
  };

  updateSwipeAnimation = function() {
    var h, w;
    w = parseInt($('#canvaspage').css('width'));
    h = parseInt($('#canvaspage').css('height'));
    $('#leftpage').css('left', -w + root.pan.x);
    $('#leftpage').css('width', w);
    $('#rightpage').css('left', 0 + root.pan.x);
    return $('#rightpage').css('width', w);
  };

  layout = function() {
    var bodyWidth, c, height, width;
    height = parseInt($('#wideband').css('height'));
    width = height * 768 / 1024;
    $('#wideband').css('width', width);
    bodyWidth = parseInt($('body').css('width'));
    $('#wideband').css('left', bodyWidth / 2 - width / 2);
    width = parseInt($('#canvaspage').css('width'));
    if (root.swipeTween != null) {
      root.swipeTween.stop();
    }
    height = parseInt($('#canvaspage').css('height'));
    c = $('canvas').get(0);
    c.clientWidth = width;
    c.width = c.clientWidth;
    c.clientHeight = height;
    c.height = c.clientHeight;
    this.renderer.width = width;
    this.renderer.height = height;
    root.pan.x = getPagePosition(root.pageIndex);
    updateSwipeAnimation();
    return root.UpdateSelectionRow();
  };

  clone = root.utility.clone;

  box = root.utility.box;

  CollapsedSizes = {
    crossings: 10,
    numComponents: 5,
    index: 5
  };

  ExpandedSizes = {
    crossings: 100,
    numComponents: 50,
    index: 50
  };

  CurrentSizes = clone(ExpandedSizes);

}).call(this);
