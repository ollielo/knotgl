// Generated by CoffeeScript 1.3.1
(function() {
  var EPSILON, InitBuffers, MobiusTube, NORMAL, POSITION, Render, Slices, Stacks, TEXCOORD, TWOPI, VERTEXID, abs, cos, pow, programs, root, sgn, sin, theta, uniforms, vbos, _ref;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  VERTEXID = 0;

  POSITION = 0;

  NORMAL = 1;

  TEXCOORD = 2;

  Slices = 4;

  Stacks = 4;

  TWOPI = 2 * Math.PI;

  EPSILON = 0.0001;

  theta = 0;

  programs = {
    mesh: 0,
    vignette: 0
  };

  vbos = {
    mesh: 0,
    bigtri: 0
  };

  uniforms = {
    projection: 0,
    modelview: 0,
    normalmatrix: 0,
    viewport: 0
  };

  _ref = [Math.sin, Math.cos, Math.pow, Math.abs], sin = _ref[0], cos = _ref[1], pow = _ref[2], abs = _ref[3];

  sgn = function(x) {
    if (x > 0) {
      return +1;
    } else {
      if (x < 0) {
        return -1;
      } else {
        return 0;
      }
    }
  };

  Render = function() {
    var aspect, eye, far, fov, gl, model, modelview, near, normalMatrix, offset, projection, stride, target, up, vbo, view;
    projection = mat4.perspective(fov = 45, aspect = 1, near = 5, far = 90);
    view = mat4.lookAt(eye = [0, -5, 5], target = [0, 0, 0], up = [0, 1, 0]);
    model = mat4.create();
    modelview = mat4.create();
    mat4.identity(model);
    mat4.rotateZ(model, theta);
    mat4.multiply(view, model, modelview);
    normalMatrix = mat4.toMat3(modelview);
    theta += 0.02;
    gl = root.gl;
    gl.clearColor(0.5, 0.5, 0.5, 1);
    gl.clear(gl.COLOR_BUFFER_BIT);
    vbo = vbos.bigtri;
    gl.useProgram(programs.vignette);
    gl.uniform2f(uniforms.viewport, 682, 512);
    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
    gl.enableVertexAttribArray(VERTEXID);
    gl.vertexAttribPointer(VERTEXID, 2, gl.FLOAT, false, stride = 8, 0);
    gl.drawArrays(gl.TRIANGLES, 0, 3);
    gl.disableVertexAttribArray(VERTEXID);
    if (gl.getError() !== gl.NO_ERROR) {
      glerr("OpenGL error A");
    }
    vbo = vbos.mesh;
    gl.useProgram(programs.mesh);
    gl.uniformMatrix4fv(uniforms.projection, false, projection);
    gl.uniformMatrix4fv(uniforms.modelview, false, modelview);
    gl.uniformMatrix3fv(uniforms.normalmatrix, false, normalMatrix);
    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
    gl.enableVertexAttribArray(POSITION);
    gl.enableVertexAttribArray(NORMAL);
    gl.vertexAttribPointer(POSITION, 3, gl.FLOAT, false, stride = 32, 0);
    gl.vertexAttribPointer(NORMAL, 3, gl.FLOAT, false, stride = 32, offset = 12);
    gl.drawArrays(gl.TRIANGLES, 0, Slices * Stacks);
    gl.disableVertexAttribArray(POSITION);
    gl.disableVertexAttribArray(NORMAL);
    if (gl.getError() !== gl.NO_ERROR) {
      return glerr("OpenGL error B");
    }
  };

  InitBuffers = function() {
    var A, B, BmA, C, CmA, corners, gl, i, msg, n, p, rawBuffer, slice, stack, u, v, vbo, vertex, _ref1, _ref2, _ref3;
    rawBuffer = new Float32Array(Slices * Stacks * 8);
    _ref1 = [-1, 0], slice = _ref1[0], i = _ref1[1];
    BmA = CmA = n = vec3.create();
    while (++slice < Slices) {
      _ref2 = [slice * TWOPI / Slices, -1], v = _ref2[0], stack = _ref2[1];
      while (++stack < Stacks) {
        u = stack * TWOPI / Stacks;
        A = p = MobiusTube(u, v);
        B = MobiusTube(u + EPSILON, v);
        C = MobiusTube(u, v + EPSILON);
        vec3.subtract(B, A, BmA);
        vec3.subtract(C, A, CmA);
        vec3.cross(BmA, CmA, n);
        vec3.normalize(n, n);
        _ref3 = [rawBuffer.subarray(i, i + 8), i + 8], vertex = _ref3[0], i = _ref3[1];
        vertex[0] = p[0];
        vertex[1] = p[1];
        vertex[2] = p[2];
        vertex[3] = n[0];
        vertex[4] = n[1];
        vertex[5] = n[2];
        vertex[6] = u;
        vertex[7] = v;
      }
    }
    msg = "" + i + " floats generated from " + Slices + " slices and " + Stacks + " stacks.";
    console.log(msg);
    gl = root.gl;
    vbo = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
    gl.bufferData(gl.ARRAY_BUFFER, rawBuffer, gl.STATIC_DRAW);
    vbos.mesh = vbo;
    corners = [-1, 3, -1, -1, 3, -1];
    rawBuffer = new Float32Array(corners);
    vbo = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
    gl.bufferData(gl.ARRAY_BUFFER, rawBuffer, gl.STATIC_DRAW);
    return vbos.bigtri = vbo;
  };

  MobiusTube = function(u, v) {
    var R, n, x, y, z, _ref1;
    _ref1 = [1.5, 3], R = _ref1[0], n = _ref1[1];
    x = (1.0 * R + 0.125 * sin(u / 2) * pow(abs(sin(v)), 2 / n) * sgn(sin(v)) + 0.5 * cos(u / 2) * pow(abs(cos(v)), 2 / n) * sgn(cos(v))) * cos(u);
    y = (1.0 * R + 0.125 * sin(u / 2) * pow(abs(sin(v)), 2 / n) * sgn(sin(v)) + 0.5 * cos(u / 2) * pow(abs(cos(v)), 2 / n) * sgn(cos(v))) * sin(u);
    z = -0.5 * sin(u / 2) * pow(abs(cos(v)), 2 / n) * sgn(cos(v)) + 0.125 * cos(u / 2) * pow(abs(sin(v)), 2 / n) * sgn(sin(v));
    return [x, y, z];
  };

  root.AppInit = function() {
    var canvas, fs, gl, h, program, vs, w;
    canvas = $("canvas");
    w = parseInt(canvas.css('width'));
    h = parseInt(canvas.css('height'));
    canvas.css('margin-left', -w / 2);
    canvas.css('margin-top', -h / 2);
    root.gl = gl = canvas.get(0).getContext("experimental-webgl", {
      antialias: true
    });
    if (!gl.getExtension("OES_texture_float")) {
      glerr("Your browser does not support floating-point textures.");
    }
    if (!gl.getExtension("OES_standard_derivatives")) {
      glerr("Your browser does not support GLSL derivatives.");
    }
    InitBuffers();
    vs = getShader(gl, "VS-Scene");
    fs = getShader(gl, "FS-Scene");
    program = gl.createProgram();
    gl.attachShader(program, vs);
    gl.attachShader(program, fs);
    gl.bindAttribLocation(program, POSITION, "Position");
    gl.bindAttribLocation(program, NORMAL, "Normal");
    gl.linkProgram(program);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
      glerr('Could not link shaders');
    }
    uniforms.projection = gl.getUniformLocation(program, "Projection");
    uniforms.modelview = gl.getUniformLocation(program, "Modelview");
    uniforms.normalmatrix = gl.getUniformLocation(program, "NormalMatrix");
    programs.mesh = program;
    vs = getShader(gl, "VS-Vignette");
    fs = getShader(gl, "FS-Vignette");
    program = gl.createProgram();
    gl.attachShader(program, vs);
    gl.attachShader(program, fs);
    gl.bindAttribLocation(program, VERTEXID, "VertexID");
    gl.linkProgram(program);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
      glerr('Could not link shaders');
    }
    uniforms.viewport = gl.getUniformLocation(program, "Viewport");
    programs.vignette = program;
    gl.disable(gl.CULL_FACE);
    gl.disable(gl.DEPTH_TEST);
    if (gl.getError() !== gl.NO_ERROR) {
      glerr("OpenGL error during init");
    }
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;
    root.gl = gl;
    return setInterval(Render, 15);
  };

}).call(this);
