// Generated by CoffeeScript 1.3.1
(function() {
  var InitBuffers, Render, modelview, normalMatrix, projection, root, theta;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.POSITION = 0;

  root.NORMAL = 1;

  theta = 0;

  projection = mat4.create();

  modelview = mat4.create();

  normalMatrix = mat3.create();

  Render = function() {
    var gl, stride, vbo, _ref;
    _ref = [root.gl, root.vbo], gl = _ref[0], vbo = _ref[1];
    gl.clearColor(0.7, 0.5, 0.5, 1);
    gl.clear(gl.COLOR_BUFFER_BIT);
    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
    gl.enableVertexAttribArray(root.POSITION);
    gl.vertexAttribPointer(root.POSITION, 3, gl.FLOAT, false, stride = 12, 0);
    gl.drawArrays(gl.TRIANGLES, 0, vbo.vertCount);
    if (gl.getError() !== gl.NO_ERROR) {
      return glerr("OpenGL error");
    }
  };

  InitBuffers = function() {
    var gl, vbo, vertices;
    gl = root.gl;
    vbo = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
    vertices = [0.0, 1.0, 0.0, -0.2, -1.0, 0.0, 1.0, -1.0, 0.0];
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
    vbo.vertCount = 3;
    return root.vbo = vbo;
  };

  root.AppInit = function() {
    var canvas, depthProgram, fragmentShader, gl, h, vertexShader, w;
    canvas = $("canvas");
    w = parseInt(canvas.css('width'));
    h = parseInt(canvas.css('height'));
    canvas.css('margin-left', -w / 2);
    canvas.css('margin-top', -h / 2);
    root.gl = gl = canvas.get(0).getContext("experimental-webgl", {
      antialias: true
    });
    if (!gl.getExtension("OES_texture_float")) {
      glerr("Your browser does not support floating-point textures.");
    }
    InitBuffers();
    vertexShader = getShader(gl, "VS-Scene");
    fragmentShader = getShader(gl, "FS-Depth");
    depthProgram = gl.createProgram();
    gl.attachShader(depthProgram, vertexShader);
    gl.attachShader(depthProgram, fragmentShader);
    gl.bindAttribLocation(depthProgram, root.POSITION, "Position");
    gl.bindAttribLocation(depthProgram, root.NORMAL, "Normal");
    gl.linkProgram(depthProgram);
    if (!gl.getProgramParameter(depthProgram, gl.LINK_STATUS)) {
      glerr('Could not link shaders');
    }
    gl.useProgram(depthProgram);
    depthProgram.projectionUniform = gl.getUniformLocation(depthProgram, "Projection");
    depthProgram.modelviewUniform = gl.getUniformLocation(depthProgram, "Modelview");
    depthProgram.normalMatrixUniform = gl.getUniformLocation(depthProgram, "NormalMatrix");
    gl.disable(gl.CULL_FACE);
    gl.disable(gl.DEPTH_TEST);
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;
    root.gl = gl;
    return setInterval(Render, 15);
  };

}).call(this);
