// Generated by CoffeeScript 1.3.1
(function() {
  var Gallery, clone, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  clone = utility.clone;

  root.Gallery = Gallery = (function() {

    Gallery.name = 'Gallery';

    Gallery.prototype.row = function() {
      var row;
      if (!(typeof row !== "undefined" && row !== null)) {
        row = this.j;
      }
      return this.links[this.j];
    };

    Gallery.prototype.link = function(row, col) {
      if (!(row != null)) {
        row = this.j;
      }
      if (!(col != null)) {
        col = this.i;
      }
      return this.links[row][col];
    };

    function Gallery() {
      var c, col, id, knot, link, range, ranges, row, x, _i, _j, _k, _len, _len1, _ref, _ref1;
      this.links = [];
      for (row = _i = 0; _i < 12; row = ++_i) {
        this.links[row] = [];
        this.links[row].theta = 0;
        this.links[row].loaded = false;
        this.links[row].loading = false;
        if (!metadata.Gallery[row]) {
          continue;
        }
        _ref = metadata.Gallery[row].split(' ');
        for (col = _j = 0, _len = _ref.length; _j < _len; col = ++_j) {
          id = _ref[col];
          link = [];
          ranges = ((function() {
            var _k, _len1, _ref1, _results;
            _ref1 = metadata.Links;
            _results = [];
            for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
              x = _ref1[_k];
              if (x[0] === id) {
                _results.push(x.slice(1));
              }
            }
            return _results;
          })())[0];
          for (c = _k = 0, _len1 = ranges.length; _k < _len1; c = ++_k) {
            range = ranges[c];
            knot = {};
            knot.range = range;
            knot.offset = vec3.create([0, 0, 0]);
            knot.color = metadata.KnotColors[c];
            link.push(knot);
          }
          link.iconified = 1;
          link.alpha = 1;
          link.ready = false;
          link.id = [id, row, col];
          this.links[row].push(link);
        }
      }
      this.createTrivialLinks();
      _ref1 = [9, 0], this.j = _ref1[0], this.i = _ref1[1];
      this.link().iconified = 0;
    }

    Gallery.prototype.createTrivialLinks = function() {
      var trivialKnot, trivialLink;
      trivialKnot = this.link(8, 1)[0];
      trivialLink = this.link(0, 0);
      trivialLink.push(clone(trivialKnot));
      trivialLink[0].offset = vec3.create([0.5, -0.25, 0]);
      trivialLink.hidden = true;
      trivialLink = this.link(8, 0);
      trivialLink.push(clone(trivialKnot));
      trivialLink.push(clone(trivialKnot));
      trivialLink[0].offset = vec3.create([0, 0, 0]);
      trivialLink[1].color = metadata.KnotColors[1];
      trivialLink[1].offset = vec3.create([0.5, 0, 0]);
      trivialLink = this.link(10, 8);
      trivialLink.push(clone(trivialKnot));
      trivialLink.push(clone(trivialKnot));
      trivialLink.push(clone(trivialKnot));
      trivialLink[0].offset = vec3.create([0, 0, 0]);
      trivialLink[1].color = metadata.KnotColors[1];
      trivialLink[1].offset = vec3.create([0.5, 0, 0]);
      trivialLink[2].color = metadata.KnotColors[2];
      return trivialLink[2].offset = vec3.create([1.0, 0, 0]);
    };

    return Gallery;

  })();

}).call(this);
